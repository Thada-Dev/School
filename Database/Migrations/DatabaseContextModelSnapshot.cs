// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using School.Database;

#nullable disable

namespace School.Database.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0-rc.1.22426.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("School.Database.Entities.Book", b =>
                {
                    b.Property<Guid>("BookGUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BookCode")
                        .HasColumnType("int");

                    b.Property<string>("BookName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StudentGUID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BookGUID");

                    b.HasIndex("StudentGUID");

                    b.ToTable("Book");
                });

            modelBuilder.Entity("School.Database.Entities.Home", b =>
                {
                    b.Property<Guid>("HomeGUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StudentGUID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("HomeGUID");

                    b.HasIndex("StudentGUID")
                        .IsUnique();

                    b.ToTable("Home");
                });

            modelBuilder.Entity("School.Database.Entities.Student", b =>
                {
                    b.Property<Guid>("StudentGUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentGUID");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("School.Database.Entities.StudentTeacher", b =>
                {
                    b.Property<Guid>("StudentGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TeacherGUID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StudentGUID", "TeacherGUID");

                    b.HasIndex("TeacherGUID");

                    b.ToTable("StudentTeacher");
                });

            modelBuilder.Entity("School.Database.Entities.Teacher", b =>
                {
                    b.Property<Guid>("TeacherGUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TeacherGUID");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("School.Database.Entities.Book", b =>
                {
                    b.HasOne("School.Database.Entities.Student", "Student")
                        .WithMany("Book")
                        .HasForeignKey("StudentGUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("School.Database.Entities.Home", b =>
                {
                    b.HasOne("School.Database.Entities.Student", "Student")
                        .WithOne("Home")
                        .HasForeignKey("School.Database.Entities.Home", "StudentGUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("School.Database.Entities.StudentTeacher", b =>
                {
                    b.HasOne("School.Database.Entities.Student", "Student")
                        .WithMany("StudentTeacher")
                        .HasForeignKey("StudentGUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("School.Database.Entities.Teacher", "Teacher")
                        .WithMany("StudentTeacher")
                        .HasForeignKey("TeacherGUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("School.Database.Entities.Student", b =>
                {
                    b.Navigation("Book");

                    b.Navigation("Home")
                        .IsRequired();

                    b.Navigation("StudentTeacher");
                });

            modelBuilder.Entity("School.Database.Entities.Teacher", b =>
                {
                    b.Navigation("StudentTeacher");
                });
#pragma warning restore 612, 618
        }
    }
}
